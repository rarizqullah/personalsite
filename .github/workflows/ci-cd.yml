name: Development CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read

jobs:
  # Job 1: Code Quality & Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run TypeScript type check
      run: bun run type-check
      
    - name: Run ESLint
      run: bun run lint
      
    - name: Build application
      run: bun run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          out/
        retention-days: 1

  # Job 2: Security Audit (Basic)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run security audit
      run: bun audit || echo "Audit completed with warnings"
      continue-on-error: true

  # Job 3: Development Summary
  dev-summary:
    name: Development Summary
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: always()
    
    steps:
    - name: Development Status
      run: |
        echo "üöÄ Development CI Pipeline Results:"
        echo "Code Quality: ${{ needs.quality.result }}"
        echo "Security Audit: ${{ needs.security.result }}"
        
        if [[ "${{ needs.quality.result }}" == "success" ]]; then
          echo "‚úÖ Code quality checks passed!"
        else
          echo "‚ùå Code quality issues found"
        fi
        
        echo "üìù Ready for continued development"
