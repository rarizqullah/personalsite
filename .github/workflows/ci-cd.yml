name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Job 1: Code Quality & Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-
          
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run TypeScript type check
      run: bun run tsc --noEmit
      
    - name: Run ESLint
      run: bun run lint
      
    - name: Build application
      run: bun run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          out/
        retention-days: 1

  # Job 2: Security & Dependency Check
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Build and Test Complete
  build-complete:
    name: Build Complete
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "Quality check: ${{ needs.quality.result }}"
        echo "Security check: ${{ needs.security.result }}"
        
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "❌ Quality checks failed"
          exit 1
        fi
        
        if [[ "${{ needs.security.result }}" != "success" && "${{ needs.security.result }}" != "skipped" ]]; then
          echo "❌ Security checks failed"
          exit 1
        fi
        
        echo "✅ All checks passed! Ready for deployment."
